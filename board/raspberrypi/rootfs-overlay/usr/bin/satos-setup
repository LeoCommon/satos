#!/bin/sh
# This script is going to set-up any persistent directories and fix the permissions of required files.
# It runs after the /data partition is mounted.

# Cleans all journals that dont match the supplied folder name
clean_journal() {
  find /var/log/journal/ -mindepth 1 -maxdepth 1 ! -name "$1" -exec rm -rf {} +
  echo "Old journal entries cleaned"
}

# Create a directory if it does not exist already
create_directory() {
  if [ ! -d "$1" ]; then
    mkdir -p "$1"
  fi
}

# Change permissions of a single file
change_permissions() {
  file_path=$1
  mode=$2
  user=${3:-}
  group=${4:-}
  chmod "$mode" "$file_path"
  if [ -n "$user" ] && [ -n "$group" ]; then
    chown "$user":"$group" "$file_path"
  fi
}

# Required persistent directories
dirs="
/data/rauc/
/data/chrony/
/data/config/apogee/
/data/config/system-connections/
/data/config/secrets/
/data/log/journal/
"

# Create all remaining directories, no action if they exist
for dir in $dirs; do
  create_directory "$dir"
done

# Check if the rauc status file exists, and if not copy over the pre-baked files
# This also comes in handy when the sd-card is flashed
rauc_prov_status='/provisioning/rauc/status.db'
rauc_target_status='/data/rauc/status.db'
if [ -f ${rauc_prov_status} ] && { [ ! -f ${rauc_target_status} ] ||
  [ -n "$(find ${rauc_prov_status} -newer ${rauc_target_status})" ]; }; then
  echo "re-creating /data/rauc/ from pre-baked files..."

  # Delete the rauc folder and copy baked data
  rm -rf /data/rauc/
  cp -a /provisioning/rauc/ /data/rauc/
fi

# Store the machine-id in the u-boot environment
# This is required for consistent journaling and more
MACHINE_ID=$(cat /etc/machine-id)
if [ -e /usr/sbin/fw_setenv ]; then
  # We have to use a different lock file as the default in /var is not ready before mounting the filesystems finishes
  # This should not be a problem, as nothing else can use this tool at this time
  if [ "$(fw_printenv -l /tmp -n MACHINE_ID)" != "${MACHINE_ID}" ]; then
    echo "saving machine id to u-boot ${MACHINE_ID}"
    fw_setenv -l /tmp MACHINE_ID "${MACHINE_ID}"
    clean_journal "${MACHINE_ID}"
  fi
fi

# Copy the time seed file from the fake_hwclock if:
# 1) The file does not exist in /data
# 2) The file does exist but has an older modification time
if [ -f /etc/fake-hwclock.seed ] && { [ ! -f /data/fake-hwclock ] ||
  [ -n "$(find /etc/fake-hwclock.seed -newer /data/fake-hwclock)" ]; }; then
  # Add -p to preserve the time, as the system time might not be correct!
  cp -p /etc/fake-hwclock.seed /data/fake-hwclock
fi

# Chrony needs permissions to save the drift files
chown -R chrony:chrony /data/chrony/

# Assign proper permissions to secret files
# Config directory itself will be world-readable
chmod -R 0755 /data/config

# Make sure network manager configs have the proper permissions
chmod -R 0600 /data/config/system-connections/

# Protect the hawkbit secrets
change_permissions /data/config/secrets/.hawkbit 0660 rauc-hawkbit rauc-hawkbit

# Secure the apogee files
chown -R apogee:apogee /data/config/apogee/
chmod -R 0770 /data/config/apogee/
change_permissions /data/config/apogee/config.yml 0660 apogee apogee

# We are done
echo "setup completed"
